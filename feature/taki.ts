import type {
  Bot,
  CreateSlashApplicationCommand,
  Interaction,
} from "../deps.ts";
import { InteractionResponseTypes } from "../deps.ts";
import { dayjs } from "../deps.ts";

const activeTakiChannels = new Set<bigint>();

let isTakiReminderLoopStarted = false;

export function getTakiCommand(): CreateSlashApplicationCommand {
  return {
    name: "taki",
    description: "ÊØéÊôÇ30ÂàÜ„Å´„ÄéÁÇä„Åç„Åæ„Åó„Çá„ÅÜüî•„Äè„É™„Éû„Ç§„É≥„Éâ„ÇíÈñãÂßã/ÁµÇ‰∫Ü„Åó„Åæ„Åô",
    options: [
      {
        name: "s",
        description: "„É™„Éû„Ç§„É≥„ÉâÈñãÂßã",
        type: 1,
      },
      {
        name: "e",
        description: "„É™„Éû„Ç§„É≥„ÉâÁµÇ‰∫Ü",
        type: 1,
      },
    ],
  };
}
export async function handleTakiInteraction(bot: Bot, interaction: Interaction) {
  if (!interaction.data || interaction.data.name !== "taki") return;

  const subCommand = interaction.data.options?.[0]?.name;
  if (!subCommand) {
    return respond(bot, interaction, "„Çµ„Éñ„Ç≥„Éû„É≥„Éâ„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
  }

  const channelId = interaction.channelId;
  if (!channelId) {
    return respond(bot, interaction, "„ÉÜ„Ç≠„Çπ„Éà„ÉÅ„É£„É≥„Éç„É´„Åß„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ");
  }

  switch (subCommand) {
    case "s": {
      activeTakiChannels.add(channelId);
      await respond(bot, interaction, "„É™„Éû„Ç§„É≥„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ");
      break;
    }
    case "e": {
      activeTakiChannels.delete(channelId);
      await respond(bot, interaction, "„É™„Éû„Ç§„É≥„Éâ„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ");
      break;
    }
    default:
      await respond(bot, interaction, `‰∏çÊòé„Å™„Çµ„Éñ„Ç≥„Éû„É≥„Éâ: ${subCommand}`);
  }
}
export function startTakiReminderLoop(bot: Bot) {
  if (isTakiReminderLoopStarted) return;
  isTakiReminderLoopStarted = true;

  setInterval(async () => {
    const now = dayjs().tz("Asia/Tokyo");
    const mm = now.minute();
    const ss = now.second();

    // 30ÂàÜ00Áßí „Åã
    if (mm === 30 && ss === 0) {
      for (const chId of activeTakiChannels) {
        try {
          await bot.helpers.sendMessage(chId, { content: "ÁÇä„Åç„Åæ„Åó„Çá„ÅÜüî•" });
        } catch (err) {
          console.error(`Failed to send message to channel ${chId}`, err);
        }
      }
    }
  }, 60 * 1000);
}

async function respond(bot: Bot, interaction: Interaction, content: string) {
  await bot.helpers.sendInteractionResponse(interaction.id, interaction.token, {
    type: InteractionResponseTypes.ChannelMessageWithSource,
    data: { content },
  });
}
